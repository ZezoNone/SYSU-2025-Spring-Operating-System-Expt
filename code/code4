org 0x7C00
bits 16

start:
    call clear_screen
    call draw_id_name
    
    xor ax, ax
    mov ds, ax
    mov ax, 0xb800      
    mov es, ax
    
    mov byte [direction], 0     
    mov byte [color], 0x1F      
    mov byte [charIndex], 0
    mov byte [row], 0           
    mov byte [col], 0           

    mov byte [left], 0
    mov byte [right], 79         
    mov byte [top], 0
    mov byte [bottom], 24       

main_loop:

    cmp byte [direction], 0
    je move_right
    cmp byte [direction], 1
    je move_down
    cmp byte [direction], 2
    je move_left
    jmp move_up

move_right:
    inc byte [col]
    mov bl, byte[right]
    cmp byte [col],bl
    jb  draw
    mov byte [direction], 1                  
    jmp draw

move_down:
    inc byte [row]
    mov bl, byte[bottom]
    cmp byte[row],bl
    jb  draw
    mov byte [direction], 2                
    jmp draw

move_left:
    dec byte [col]
    mov bl, byte[left]
    cmp byte[col],bl
    ja  draw
    mov byte [direction], 3                
    jmp draw

move_up:
    dec byte [row]
    mov bl, byte[top]
    cmp byte[row],bl
    ja  draw
    mov byte [direction], 0                

draw:
    mov ax, [charIndex]
    mov bl, 8
    div bl
    mov [charIndex],ah
    
    call draw_char
    inc byte[color]
    inc byte[charIndex]
    
    mov cx, 0x0000
    mov dx, 0x5fff
    mov ah, 0x86
    int 0x15

    jmp main_loop

clear_screen:
    pusha           
    mov ax, 0xB800  
    mov es, ax      
    xor di, di      
    mov ax, 0x0720  
    mov cx, 2000    
    cld             
    rep stosw       
    popa            
    ret            

draw_id_name:
    pusha
    xor ax, ax
    mov ax, 0xb800
    mov es, ax

    mov ah, 0x74
    mov al, '2'
    mov [es:2 * 995], ax

    mov al, '3'
    mov [es:2 * 996], ax

    mov al, '3'
    mov [es:2 * 997], ax

    mov al, '3'
    mov [es:2 * 998], ax

    mov al, '6'
    mov [es:2 * 999], ax

    mov al, '3'
    mov [es:2 * 1000], ax

    mov al, '4'
    mov [es:2 * 1001], ax

    mov al, '2'
    mov [es:2 * 1002], ax

    mov al, '-'
    mov [es:2 * 1003], ax

    mov al, 'Z'
    mov [es:2 * 1004], ax

    mov al, 'W'
    mov [es:2 * 1005], ax

    mov al, 'X'
    mov [es:2 * 1006], ax

    popa
    ret 

draw_char:
    pusha
    xor ax, ax
    mov al, [row]
    mov bx, 80
    mul bx
    add al, [col]
    adc ah, 0
    shl ax, 1
    mov di, ax

    mov bx, [charIndex]
    mov al, [chars + bx]
    
    mov ah, [color]
    mov [es:di], ax
    popa
    ret


chars db '2','3','3','3','6','3','4','2'
direction db 0
color db 0x1F
row db 0
col db 0
left db 0
right db 79
top db 0
bottom db 24
charIndex db 0

times 510 - ($ - $$) db 0
db 0x55, 0xaa
